// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SceneSkope.PowerBI
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DatasetsOperations.
    /// </summary>
    public static partial class DatasetsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of datasets from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Datasets GetDatasets(this IDatasetsOperations operations)
            {
                return operations.GetDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasets> GetDatasetsAsync(this IDatasetsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new dataset on **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Dataset defenition to create
            /// </param>
            /// <param name='defaultRetentionPolicy'>
            /// The default retention policy. Possible values include: 'None', 'basicFIFO'
            /// </param>
            public static Dataset PostDataset(this IDatasetsOperations operations, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = default(DefaultRetentionPolicy?))
            {
                return operations.PostDatasetAsync(dataset, defaultRetentionPolicy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new dataset on **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Dataset defenition to create
            /// </param>
            /// <param name='defaultRetentionPolicy'>
            /// The default retention policy. Possible values include: 'None', 'basicFIFO'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> PostDatasetAsync(this IDatasetsOperations operations, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = default(DefaultRetentionPolicy?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDatasetWithHttpMessagesAsync(dataset, defaultRetentionPolicy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static Dataset GetDataset(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetDatasetAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static void DeleteDataset(this IDatasetsOperations operations, string datasetId)
            {
                operations.DeleteDatasetAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDatasetAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDatasetWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of tables tables within the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static Tables GetTables(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetTablesAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of tables tables within the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tables> GetTablesAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTablesWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table within the
            /// specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// Table name and columns to update existing table
            /// </param>
            public static Table PutTable(this IDatasetsOperations operations, string datasetId, string tableName, Table requestMessage)
            {
                return operations.PutTableAsync(datasetId, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table within the
            /// specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// Table name and columns to update existing table
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Table> PutTableAsync(this IDatasetsOperations operations, string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTableWithHttpMessagesAsync(datasetId, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new data rows to the specified table within the specified dataset from
            /// **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**REST API Limitations:** See [Power BI REST API
            /// limitations](https://msdn.microsoft.com/library/dn950053.aspx).
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static void PostRows(this IDatasetsOperations operations, string datasetId, string tableName, object requestMessage)
            {
                operations.PostRowsAsync(datasetId, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new data rows to the specified table within the specified dataset from
            /// **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**REST API Limitations:** See [Power BI REST API
            /// limitations](https://msdn.microsoft.com/library/dn950053.aspx).
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostRowsAsync(this IDatasetsOperations operations, string datasetId, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostRowsWithHttpMessagesAsync(datasetId, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes all rows from the specified table within the specified dataset from
            /// **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: this API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            public static void DeleteRows(this IDatasetsOperations operations, string datasetId, string tableName)
            {
                operations.DeleteRowsAsync(datasetId, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all rows from the specified table within the specified dataset from
            /// **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: this API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRowsAsync(this IDatasetsOperations operations, string datasetId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRowsWithHttpMessagesAsync(datasetId, tableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh history of the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            public static Refreshes GetRefreshHistory(this IDatasetsOperations operations, string datasetId, int? top = default(int?))
            {
                return operations.GetRefreshHistoryAsync(datasetId, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh history of the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Refreshes> GetRefreshHistoryAsync(this IDatasetsOperations operations, string datasetId, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshHistoryWithHttpMessagesAsync(datasetId, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;In Shared capacities this call is limited to eight times per day
            /// (including refreshes executed via Scheduled Refresh)&lt;br/&gt;In Premium
            /// capacities this call is not limited in number of times per day, but only by
            /// the available resources in the capacity, hence if overloaded, the refresh
            /// execution may be throttled until the load is reduced. If this throttling
            /// exceeds 1 hour, the refresh will fail.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='refreshRequest'>
            /// </param>
            public static void RefreshDataset(this IDatasetsOperations operations, string datasetId, RefreshRequest refreshRequest = default(RefreshRequest))
            {
                operations.RefreshDatasetAsync(datasetId, refreshRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;In Shared capacities this call is limited to eight times per day
            /// (including refreshes executed via Scheduled Refresh)&lt;br/&gt;In Premium
            /// capacities this call is not limited in number of times per day, but only by
            /// the available resources in the capacity, hence if overloaded, the refresh
            /// execution may be throttled until the load is reduced. If this throttling
            /// exceeds 1 hour, the refresh will fail.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='refreshRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RefreshDatasetAsync(this IDatasetsOperations operations, string datasetId, RefreshRequest refreshRequest = default(RefreshRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RefreshDatasetWithHttpMessagesAsync(datasetId, refreshRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh schedule of the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static RefreshSchedule GetRefreshSchedule(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetRefreshScheduleAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule of the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RefreshSchedule> GetRefreshScheduleAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshScheduleWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request that disables the refresh schedule should
            /// contain no other changes.&lt;br/&gt;The days array should not be set to
            /// empty array.&lt;br/&gt;The times may be set to empty array (in which case
            /// Power BI will use a default single time per day).&lt;br/&gt;The limit on
            /// number of time slots per day depends on the type of capacity used (Premium
            /// or Shared), see [What is Microsoft Power BI
            /// Premium](https://docs.microsoft.com/en-us/power-bi/service-premium).&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            public static void UpdateRefreshSchedule(this IDatasetsOperations operations, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest)
            {
                operations.UpdateRefreshScheduleAsync(datasetId, datasetModelRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request that disables the refresh schedule should
            /// contain no other changes.&lt;br/&gt;The days array should not be set to
            /// empty array.&lt;br/&gt;The times may be set to empty array (in which case
            /// Power BI will use a default single time per day).&lt;br/&gt;The limit on
            /// number of time slots per day depends on the type of capacity used (Premium
            /// or Shared), see [What is Microsoft Power BI
            /// Premium](https://docs.microsoft.com/en-us/power-bi/service-premium).&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateRefreshScheduleAsync(this IDatasetsOperations operations, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateRefreshScheduleWithHttpMessagesAsync(datasetId, datasetModelRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh schedule of a specified DirectQuery or LiveConnection
            /// dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static DirectQueryRefreshSchedule GetDirectQueryRefreshSchedule(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetDirectQueryRefreshScheduleAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule of a specified DirectQuery or LiveConnection
            /// dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DirectQueryRefreshSchedule> GetDirectQueryRefreshScheduleAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDirectQueryRefreshScheduleWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for the specified DirectQuery or
            /// LiveConnection dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request should contain either a combination of days and
            /// times  (setting times is optional, otherwise a default single time per day
            /// is used) or a valid frequency, but not both.&lt;br/&gt;Setting frequency
            /// will automatically truncate the days and times
            /// arrays.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            public static void UpdateDirectQueryRefreshSchedule(this IDatasetsOperations operations, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest)
            {
                operations.UpdateDirectQueryRefreshScheduleAsync(datasetId, datasetDQRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for the specified DirectQuery or
            /// LiveConnection dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request should contain either a combination of days and
            /// times  (setting times is optional, otherwise a default single time per day
            /// is used) or a valid frequency, but not both.&lt;br/&gt;Setting frequency
            /// will automatically truncate the days and times
            /// arrays.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDirectQueryRefreshScheduleAsync(this IDatasetsOperations operations, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDirectQueryRefreshScheduleWithHttpMessagesAsync(datasetId, datasetDQRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;Datasets
            /// with SQL, Oracle, Teradata &amp; SapHana Direct Query connections are not
            /// supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static MashupParameters GetParameters(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetParametersAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;Datasets
            /// with SQL, Oracle, Teradata &amp; SapHana Direct Query connections are not
            /// supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MashupParameters> GetParametersAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParametersWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The dataset must be refreshed for new parameters
            /// values to be applied. Wait 30 minutes for the update parameters operation
            /// to complete before refreshing.&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;All parameters must
            /// exist in the dataset. Names are case-sensitive.
            /// &lt;/li&gt;&lt;li&gt;Datasets with SQL, Oracle, Teradata &amp; SapHana
            /// Direct Query connections are not supported. &lt;/li&gt;&lt;li&gt;Datasets
            /// with Analysis Services Live connections are not supported.
            /// &lt;/li&gt;&lt;li&gt; Maximum of a 100 parameters in request is allowed.
            /// &lt;/li&gt;&lt;li&gt; Values should be of expected Type.
            /// &lt;/li&gt;&lt;li&gt; Cannot pass empty value to an IsRequired parameter.
            /// &lt;/li&gt;&lt;li&gt; List cannot be empty or include multiple occurrences
            /// of same parameter. &lt;/li&gt;&lt;li&gt; Parameters of types 'Any' or
            /// 'Binary' cannot be set. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='updateMashupParametersRequest'>
            /// </param>
            public static void UpdateParameters(this IDatasetsOperations operations, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest)
            {
                operations.UpdateParametersAsync(datasetId, updateMashupParametersRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The dataset must be refreshed for new parameters
            /// values to be applied. Wait 30 minutes for the update parameters operation
            /// to complete before refreshing.&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;All parameters must
            /// exist in the dataset. Names are case-sensitive.
            /// &lt;/li&gt;&lt;li&gt;Datasets with SQL, Oracle, Teradata &amp; SapHana
            /// Direct Query connections are not supported. &lt;/li&gt;&lt;li&gt;Datasets
            /// with Analysis Services Live connections are not supported.
            /// &lt;/li&gt;&lt;li&gt; Maximum of a 100 parameters in request is allowed.
            /// &lt;/li&gt;&lt;li&gt; Values should be of expected Type.
            /// &lt;/li&gt;&lt;li&gt; Cannot pass empty value to an IsRequired parameter.
            /// &lt;/li&gt;&lt;li&gt; List cannot be empty or include multiple occurrences
            /// of same parameter. &lt;/li&gt;&lt;li&gt; Parameters of types 'Any' or
            /// 'Binary' cannot be set. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='updateMashupParametersRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateParametersAsync(this IDatasetsOperations operations, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateParametersWithHttpMessagesAsync(datasetId, updateMashupParametersRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static Datasources GetDatasources(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetDatasourcesAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDatasourcesAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the datasources of the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**:&lt;ul&gt;&lt;li&gt;The original datasource and
            /// the new datasource must have the exact same schema.&lt;/li&gt;&lt;li&gt;For
            /// cached models, the dataset must be refreshed to get the data from the new
            /// data sources. Wait 30 minutes for the update datasources operation to
            /// complete before
            /// refreshing.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Update datasources
            /// supports SQL Server, Azure SQL Server, Analysis Services, Azure Analysis
            /// Services, OData Feed, and SharePoint datasources. For other datasource
            /// types, use [Update
            /// Parameters](/rest/api/power-bi/datasets/updateparameters)
            /// &lt;/li&gt;&lt;li&gt;Changing datasource type is not supported.
            /// &lt;/li&gt;&lt;li&gt;Datasources that contain parameters on the connection
            /// string are not supported. &lt;/li&gt;&lt;li&gt;Datasources which are part
            /// of Merged or Joined tables are not supported. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            public static void UpdateDatasources(this IDatasetsOperations operations, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest)
            {
                operations.UpdateDatasourcesAsync(datasetId, updateDatasourcesRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the datasources of the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**:&lt;ul&gt;&lt;li&gt;The original datasource and
            /// the new datasource must have the exact same schema.&lt;/li&gt;&lt;li&gt;For
            /// cached models, the dataset must be refreshed to get the data from the new
            /// data sources. Wait 30 minutes for the update datasources operation to
            /// complete before
            /// refreshing.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Update datasources
            /// supports SQL Server, Azure SQL Server, Analysis Services, Azure Analysis
            /// Services, OData Feed, and SharePoint datasources. For other datasource
            /// types, use [Update
            /// Parameters](/rest/api/power-bi/datasets/updateparameters)
            /// &lt;/li&gt;&lt;li&gt;Changing datasource type is not supported.
            /// &lt;/li&gt;&lt;li&gt;Datasources that contain parameters on the connection
            /// string are not supported. &lt;/li&gt;&lt;li&gt;Datasources which are part
            /// of Merged or Joined tables are not supported. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasourcesAsync(this IDatasetsOperations operations, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasourcesWithHttpMessagesAsync(datasetId, updateDatasourcesRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates all connections for the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**:&lt;ul&gt;&lt;li&gt;To update connection details for
            /// SQL, AS, OData Feed, and SharePoint, use [Update
            /// Datasources](/rest/api/power-bi/datasets/updatedatasources). For other
            /// datasource types, use [Update
            /// Parameters](/rest/api/power-bi/datasets/updateparameters).&lt;/li&gt;&lt;li&gt;This
            /// API only supports SQL DirectQuery
            /// datasets.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            public static void SetAllDatasetConnections(this IDatasetsOperations operations, string datasetId, ConnectionDetails parameters)
            {
                operations.SetAllDatasetConnectionsAsync(datasetId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates all connections for the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**:&lt;ul&gt;&lt;li&gt;To update connection details for
            /// SQL, AS, OData Feed, and SharePoint, use [Update
            /// Datasources](/rest/api/power-bi/datasets/updatedatasources). For other
            /// datasource types, use [Update
            /// Parameters](/rest/api/power-bi/datasets/updateparameters).&lt;/li&gt;&lt;li&gt;This
            /// API only supports SQL DirectQuery
            /// datasets.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetAllDatasetConnectionsAsync(this IDatasetsOperations operations, string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetAllDatasetConnectionsWithHttpMessagesAsync(datasetId, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Binds the specified dataset from **"My Workspace"** to the specified
            /// gateway with (optional) given set of datasource Ids. This only supports the
            /// On-Premises Data Gateway.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            public static void BindToGateway(this IDatasetsOperations operations, string datasetId, BindToGatewayRequest bindToGatewayRequest)
            {
                operations.BindToGatewayAsync(datasetId, bindToGatewayRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Binds the specified dataset from **"My Workspace"** to the specified
            /// gateway with (optional) given set of datasource Ids. This only supports the
            /// On-Premises Data Gateway.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BindToGatewayAsync(this IDatasetsOperations operations, string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BindToGatewayWithHttpMessagesAsync(datasetId, bindToGatewayRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of gateway datasources for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: Use the new [Dataset - Get
            /// Datasources](/rest/api/power-bi/datasets/getdatasources) API
            /// instead.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static GatewayDatasources GetGatewayDatasources(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetGatewayDatasourcesAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateway datasources for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: Use the new [Dataset - Get
            /// Datasources](/rest/api/power-bi/datasets/getdatasources) API
            /// instead.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayDatasources> GetGatewayDatasourcesAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayDatasourcesWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of gateways which the specified dataset from **"My
            /// Workspace"** can be bound to.
            /// </summary>
            /// <remarks>
            /// This API is relevant only for datasets that have at least one on-premises
            /// connection. &lt;br/&gt;For datasets with cloud-only connections, it will
            /// return an empty list. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static Gateways DiscoverGateways(this IDatasetsOperations operations, string datasetId)
            {
                return operations.DiscoverGatewaysAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateways which the specified dataset from **"My
            /// Workspace"** can be bound to.
            /// </summary>
            /// <remarks>
            /// This API is relevant only for datasets that have at least one on-premises
            /// connection. &lt;br/&gt;For datasets with cloud-only connections, it will
            /// return an empty list. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Gateways> DiscoverGatewaysAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverGatewaysWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            public static Datasets GetDatasetsInGroup(this IDatasetsOperations operations, System.Guid groupId)
            {
                return operations.GetDatasetsInGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasets> GetDatasetsInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsInGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new dataset in the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dataset'>
            /// Create dataset parameters
            /// </param>
            /// <param name='defaultRetentionPolicy'>
            /// The default retention policy. Possible values include: 'None', 'basicFIFO'
            /// </param>
            public static Dataset PostDatasetInGroup(this IDatasetsOperations operations, System.Guid groupId, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = default(DefaultRetentionPolicy?))
            {
                return operations.PostDatasetInGroupAsync(groupId, dataset, defaultRetentionPolicy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new dataset in the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dataset'>
            /// Create dataset parameters
            /// </param>
            /// <param name='defaultRetentionPolicy'>
            /// The default retention policy. Possible values include: 'None', 'basicFIFO'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> PostDatasetInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = default(DefaultRetentionPolicy?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDatasetInGroupWithHttpMessagesAsync(groupId, dataset, defaultRetentionPolicy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static Dataset GetDatasetInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetDatasetInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static void DeleteDatasetInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                operations.DeleteDatasetInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDatasetInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDatasetInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of tables within the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static Tables GetTablesInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetTablesInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of tables within the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tables> GetTablesInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTablesInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table, within the
            /// specified dataset, from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static Table PutTableInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName, Table requestMessage)
            {
                return operations.PutTableInGroupAsync(groupId, datasetId, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table, within the
            /// specified dataset, from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Table> PutTableInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTableInGroupWithHttpMessagesAsync(groupId, datasetId, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new data rows to the specified table, within the specified dataset,
            /// from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**REST API Limitations:** See [Power BI REST API
            /// limitations](https://msdn.microsoft.com/library/dn950053.aspx).
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static void PostRowsInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName, object requestMessage)
            {
                operations.PostRowsInGroupAsync(groupId, datasetId, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new data rows to the specified table, within the specified dataset,
            /// from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**REST API Limitations:** See [Power BI REST API
            /// limitations](https://msdn.microsoft.com/library/dn950053.aspx).
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostRowsInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostRowsInGroupWithHttpMessagesAsync(groupId, datasetId, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes all rows from the specified table, within the specified dataset,
            /// from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            public static void DeleteRowsInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName)
            {
                operations.DeleteRowsInGroupAsync(groupId, datasetId, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all rows from the specified table, within the specified dataset,
            /// from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRowsInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRowsInGroupWithHttpMessagesAsync(groupId, datasetId, tableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh history of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            public static Refreshes GetRefreshHistoryInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, int? top = default(int?))
            {
                return operations.GetRefreshHistoryInGroupAsync(groupId, datasetId, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh history of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Refreshes> GetRefreshHistoryInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshHistoryInGroupWithHttpMessagesAsync(groupId, datasetId, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;In Shared capacities this call is limited to eight times per day
            /// (including refreshes executed via Scheduled Refresh)&lt;br/&gt;In Premium
            /// capacities this call is not limited in number of times per day, but only by
            /// the available resources in the capacity, hence if overloaded, the refresh
            /// execution may be throttled until the load is reduced. If this throttling
            /// exceeds 1 hour, the refresh will fail.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='refreshRequest'>
            /// </param>
            public static void RefreshDatasetInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, RefreshRequest refreshRequest = default(RefreshRequest))
            {
                operations.RefreshDatasetInGroupAsync(groupId, datasetId, refreshRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;In Shared capacities this call is limited to eight times per day
            /// (including refreshes executed via Scheduled Refresh)&lt;br/&gt;In Premium
            /// capacities this call is not limited in number of times per day, but only by
            /// the available resources in the capacity, hence if overloaded, the refresh
            /// execution may be throttled until the load is reduced. If this throttling
            /// exceeds 1 hour, the refresh will fail.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='refreshRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RefreshDatasetInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, RefreshRequest refreshRequest = default(RefreshRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RefreshDatasetInGroupWithHttpMessagesAsync(groupId, datasetId, refreshRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh schedule of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static RefreshSchedule GetRefreshScheduleInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetRefreshScheduleInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RefreshSchedule> GetRefreshScheduleInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request that disables the refresh schedule should
            /// contain no other changes.&lt;br/&gt;The days array should not be set to
            /// empty array.&lt;br/&gt;The times may be set to empty array (in which case
            /// Power BI will use a default single time per day).&lt;br/&gt;The limit on
            /// number of time slots per day depends on the type of capacity used (Premium
            /// or Shared), see [What is Microsoft Power BI
            /// Premium](https://docs.microsoft.com/en-us/power-bi/service-premium).&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            public static void UpdateRefreshScheduleInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest)
            {
                operations.UpdateRefreshScheduleInGroupAsync(groupId, datasetId, datasetModelRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request that disables the refresh schedule should
            /// contain no other changes.&lt;br/&gt;The days array should not be set to
            /// empty array.&lt;br/&gt;The times may be set to empty array (in which case
            /// Power BI will use a default single time per day).&lt;br/&gt;The limit on
            /// number of time slots per day depends on the type of capacity used (Premium
            /// or Shared), see [What is Microsoft Power BI
            /// Premium](https://docs.microsoft.com/en-us/power-bi/service-premium).&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateRefreshScheduleInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetId, datasetModelRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh schedule of a specified DirectQuery or LiveConnection
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static DirectQueryRefreshSchedule GetDirectQueryRefreshScheduleInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetDirectQueryRefreshScheduleInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule of a specified DirectQuery or LiveConnection
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DirectQueryRefreshSchedule> GetDirectQueryRefreshScheduleInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDirectQueryRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for the specified DirectQuery or
            /// LiveConnection dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request should contain either a combination of days and
            /// times  (setting times is optional, otherwise a default single time per day
            /// is used) or a valid frequency, but not both.&lt;br/&gt;Setting frequency
            /// will automatically truncate the days and times
            /// arrays.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            public static void UpdateDirectQueryRefreshScheduleInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest)
            {
                operations.UpdateDirectQueryRefreshScheduleInGroupAsync(groupId, datasetId, datasetDQRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for the specified DirectQuery or
            /// LiveConnection dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request should contain either a combination of days and
            /// times  (setting times is optional, otherwise a default single time per day
            /// is used) or a valid frequency, but not both.&lt;br/&gt;Setting frequency
            /// will automatically truncate the days and times
            /// arrays.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDirectQueryRefreshScheduleInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDirectQueryRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetId, datasetDQRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;Datasets
            /// with SQL, Oracle, Teradata &amp; SapHana Direct Query connections are not
            /// supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            public static MashupParameters GetParametersInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetParametersInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;Datasets
            /// with SQL, Oracle, Teradata &amp; SapHana Direct Query connections are not
            /// supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MashupParameters> GetParametersInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParametersInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The dataset must be refreshed for the new
            /// parameter values to be applied. Wait 30 minutes for the update parameters
            /// operation to complete before refreshing.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;All parameters must
            /// exist in the dataset. Names are case-sensitive.
            /// &lt;/li&gt;&lt;li&gt;Datasets with SQL, Oracle, Teradata &amp; SapHana
            /// Direct Query connections are not supported. &lt;/li&gt;&lt;li&gt;Datasets
            /// with Analysis Services Live connections are not supported.
            /// &lt;/li&gt;&lt;li&gt; Maximum of 100 parameters in request is allowed.
            /// &lt;/li&gt;&lt;li&gt; Values should be of expected type.
            /// &lt;/li&gt;&lt;li&gt; An empty value is not permitted for the IsRequired
            /// parameter. &lt;/li&gt;&lt;li&gt; List cannot be empty or include multiple
            /// occurrences of same parameter. &lt;/li&gt;&lt;li&gt; Parameters of types
            /// 'Any' or 'Binary' cannot be set. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='updateMashupParametersRequest'>
            /// </param>
            public static void UpdateParametersInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest)
            {
                operations.UpdateParametersInGroupAsync(groupId, datasetId, updateMashupParametersRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The dataset must be refreshed for the new
            /// parameter values to be applied. Wait 30 minutes for the update parameters
            /// operation to complete before refreshing.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;All parameters must
            /// exist in the dataset. Names are case-sensitive.
            /// &lt;/li&gt;&lt;li&gt;Datasets with SQL, Oracle, Teradata &amp; SapHana
            /// Direct Query connections are not supported. &lt;/li&gt;&lt;li&gt;Datasets
            /// with Analysis Services Live connections are not supported.
            /// &lt;/li&gt;&lt;li&gt; Maximum of 100 parameters in request is allowed.
            /// &lt;/li&gt;&lt;li&gt; Values should be of expected type.
            /// &lt;/li&gt;&lt;li&gt; An empty value is not permitted for the IsRequired
            /// parameter. &lt;/li&gt;&lt;li&gt; List cannot be empty or include multiple
            /// occurrences of same parameter. &lt;/li&gt;&lt;li&gt; Parameters of types
            /// 'Any' or 'Binary' cannot be set. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='updateMashupParametersRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateParametersInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateParametersInGroupWithHttpMessagesAsync(groupId, datasetId, updateMashupParametersRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            public static Datasources GetDatasourcesInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetDatasourcesInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDatasourcesInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the datasources of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**:&lt;ul&gt;&lt;li&gt;The original datasource and
            /// the new datasource must have the exact same schema.&lt;/li&gt;&lt;li&gt;For
            /// cached models, the dataset must be refreshed to get the data from the new
            /// datasources. Wait 30 minutes for the update datasources operation to
            /// complete before
            /// refreshing.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Update datasources
            /// supports SQL Server, Azure SQL Server, Analysis Services, Azure Analysis
            /// Services, OData Feed, and SharePoint datasources. For other datasource
            /// types, use [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/updateparametersingroup).
            /// &lt;/li&gt;&lt;li&gt;Changing datasource type is not supported.
            /// &lt;/li&gt;&lt;li&gt;Datasources that contain parameters on the connection
            /// string are not supported. &lt;/li&gt;&lt;li&gt;Datasources which are part
            /// of Merged or Joined tables are not supported. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            public static void UpdateDatasourcesInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest)
            {
                operations.UpdateDatasourcesInGroupAsync(groupId, datasetId, updateDatasourcesRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the datasources of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**:&lt;ul&gt;&lt;li&gt;The original datasource and
            /// the new datasource must have the exact same schema.&lt;/li&gt;&lt;li&gt;For
            /// cached models, the dataset must be refreshed to get the data from the new
            /// datasources. Wait 30 minutes for the update datasources operation to
            /// complete before
            /// refreshing.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Update datasources
            /// supports SQL Server, Azure SQL Server, Analysis Services, Azure Analysis
            /// Services, OData Feed, and SharePoint datasources. For other datasource
            /// types, use [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/updateparametersingroup).
            /// &lt;/li&gt;&lt;li&gt;Changing datasource type is not supported.
            /// &lt;/li&gt;&lt;li&gt;Datasources that contain parameters on the connection
            /// string are not supported. &lt;/li&gt;&lt;li&gt;Datasources which are part
            /// of Merged or Joined tables are not supported. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasourcesInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetId, updateDatasourcesRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates all connections for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**:&lt;ul&gt;&lt;li&gt;To update connection details for
            /// SQL, AS, OData Feed, and SharePoint, use [Update Datasources In
            /// Group](/rest/api/power-bi/datasets/updatedatasourcesingroup). For other
            /// datasource types, use [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/updateparametersingroup).&lt;/li&gt;&lt;li&gt;This
            /// API only supports SQL DirectQuery datasets.&lt;/li&gt;&lt;/ul&gt;
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            public static void SetAllDatasetConnectionsInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, ConnectionDetails parameters)
            {
                operations.SetAllDatasetConnectionsInGroupAsync(groupId, datasetId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates all connections for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**:&lt;ul&gt;&lt;li&gt;To update connection details for
            /// SQL, AS, OData Feed, and SharePoint, use [Update Datasources In
            /// Group](/rest/api/power-bi/datasets/updatedatasourcesingroup). For other
            /// datasource types, use [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/updateparametersingroup).&lt;/li&gt;&lt;li&gt;This
            /// API only supports SQL DirectQuery datasets.&lt;/li&gt;&lt;/ul&gt;
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetAllDatasetConnectionsInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetAllDatasetConnectionsInGroupWithHttpMessagesAsync(groupId, datasetId, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Binds the specified dataset from the specified workspace to the specified
            /// gateway with (optional) given set of datasource Ids. This only supports the
            /// On-Premises Data Gateway.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            public static void BindToGatewayInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, BindToGatewayRequest bindToGatewayRequest)
            {
                operations.BindToGatewayInGroupAsync(groupId, datasetId, bindToGatewayRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Binds the specified dataset from the specified workspace to the specified
            /// gateway with (optional) given set of datasource Ids. This only supports the
            /// On-Premises Data Gateway.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BindToGatewayInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BindToGatewayInGroupWithHttpMessagesAsync(groupId, datasetId, bindToGatewayRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of gateway datasources for the specified dataset from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: Use the [Dataset - Get Datasources In
            /// Group](/rest/api/power-bi/datasets/getdatasourcesingroup) API
            /// instead.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static GatewayDatasources GetGatewayDatasourcesInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetGatewayDatasourcesInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateway datasources for the specified dataset from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: Use the [Dataset - Get Datasources In
            /// Group](/rest/api/power-bi/datasets/getdatasourcesingroup) API
            /// instead.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayDatasources> GetGatewayDatasourcesInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of gateways that the specified dataset from the specified
            /// workspace can be bound to.
            /// </summary>
            /// <remarks>
            /// This API is relevant only for datasets that have at least one on-premises
            /// connection. &lt;br/&gt;For datasets with cloud-only connections, it will
            /// return an empty list. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static Gateways DiscoverGatewaysInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.DiscoverGatewaysInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateways that the specified dataset from the specified
            /// workspace can be bound to.
            /// </summary>
            /// <remarks>
            /// This API is relevant only for datasets that have at least one on-premises
            /// connection. &lt;br/&gt;For datasets with cloud-only connections, it will
            /// return an empty list. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Gateways> DiscoverGatewaysInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverGatewaysInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Transfers ownership over the specified dataset to the current authorized
            /// user.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            public static void TakeOverInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                operations.TakeOverInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Transfers ownership over the specified dataset to the current authorized
            /// user.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TakeOverInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.TakeOverInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Generates an embed token to [Embed
            /// Q&amp;A](https://docs.microsoft.com/power-bi/developer/qanda) based on the
            /// specified dataset from the specified workspace.&lt;br/&gt;This API is
            /// relevant only to ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers).
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateTokenInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenInGroupAsync(groupId, datasetId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates an embed token to [Embed
            /// Q&amp;A](https://docs.microsoft.com/power-bi/developer/qanda) based on the
            /// specified dataset from the specified workspace.&lt;br/&gt;This API is
            /// relevant only to ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers).
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetId'>
            /// The dataset id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenInGroupWithHttpMessagesAsync(groupId, datasetId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasets for the organization.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;This API processes each request for 2 seconds, in the mean time
            /// other requests will be queued. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All or Tenant.ReadWrite.All&lt;br/&gt;To set the permissions
            /// scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static Datasets GetDatasetsAsAdmin(this IDatasetsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetDatasetsAsAdminAsync(filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets for the organization.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;This API processes each request for 2 seconds, in the mean time
            /// other requests will be queued. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All or Tenant.ReadWrite.All&lt;br/&gt;To set the permissions
            /// scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasets> GetDatasetsAsAdminAsync(this IDatasetsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsAsAdminWithHttpMessagesAsync(filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;This API processes each request for 0.5 seconds, in the mean
            /// time other requests  will be queued. &lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Tenant.Read.All&lt;br/&gt;Application only and delegated
            /// permissions are supported.&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            public static Datasources GetDatasourcesAsAdmin(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetDatasourcesAsAdminAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;This API processes each request for 0.5 seconds, in the mean
            /// time other requests  will be queued. &lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Tenant.Read.All&lt;br/&gt;Application only and delegated
            /// permissions are supported.&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDatasourcesAsAdminAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesAsAdminWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;This API allows 200 requests per hour at maximum.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline
            /// </param>
            public static Datasets GetDatasetsInGroupAsAdmin(this IDatasetsOperations operations, System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string))
            {
                return operations.GetDatasetsInGroupAsAdminAsync(groupId, filter, top, skip, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;This API allows 200 requests per hour at maximum.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasets> GetDatasetsInGroupAsAdminAsync(this IDatasetsOperations operations, System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsInGroupAsAdminWithHttpMessagesAsync(groupId, filter, top, skip, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
