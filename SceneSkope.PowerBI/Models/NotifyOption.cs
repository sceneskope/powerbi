// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SceneSkope.PowerBI.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for NotifyOption.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NotifyOption
    {
        /// <summary>
        /// No notification will be sent
        /// </summary>
        [EnumMember(Value = "NoNotification")]
        NoNotification,
        /// <summary>
        /// Mail notification will be sent on refresh failure
        /// </summary>
        [EnumMember(Value = "MailOnFailure")]
        MailOnFailure,
        /// <summary>
        /// Mail notification will be sent on refresh completion, including
        /// either failure and success
        /// </summary>
        [EnumMember(Value = "MailOnCompletion")]
        MailOnCompletion
    }
    internal static class NotifyOptionEnumExtension
    {
        internal static string ToSerializedValue(this NotifyOption? value)
        {
            return value == null ? null : ((NotifyOption)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this NotifyOption value)
        {
            switch( value )
            {
                case NotifyOption.NoNotification:
                    return "NoNotification";
                case NotifyOption.MailOnFailure:
                    return "MailOnFailure";
                case NotifyOption.MailOnCompletion:
                    return "MailOnCompletion";
            }
            return null;
        }

        internal static NotifyOption? ParseNotifyOption(this string value)
        {
            switch( value )
            {
                case "NoNotification":
                    return NotifyOption.NoNotification;
                case "MailOnFailure":
                    return NotifyOption.MailOnFailure;
                case "MailOnCompletion":
                    return NotifyOption.MailOnCompletion;
            }
            return null;
        }
    }
}
