// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SceneSkope.PowerBI.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for WorkloadState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum WorkloadState
    {
        /// <summary>
        /// The workload is disabled
        /// </summary>
        [EnumMember(Value = "Disabled")]
        Disabled,
        /// <summary>
        /// The workload is enabled
        /// </summary>
        [EnumMember(Value = "Enabled")]
        Enabled,
        /// <summary>
        /// The workload is unsupported by the current capacity SKU and cannot
        /// be enabled. This value cannot be set by the user in the [Patch
        /// Workload](/rest/api/power-bi/capacities/patchworkload)
        /// </summary>
        [EnumMember(Value = "Unsupported")]
        Unsupported
    }
    internal static class WorkloadStateEnumExtension
    {
        internal static string ToSerializedValue(this WorkloadState? value)
        {
            return value == null ? null : ((WorkloadState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this WorkloadState value)
        {
            switch( value )
            {
                case WorkloadState.Disabled:
                    return "Disabled";
                case WorkloadState.Enabled:
                    return "Enabled";
                case WorkloadState.Unsupported:
                    return "Unsupported";
            }
            return null;
        }

        internal static WorkloadState? ParseWorkloadState(this string value)
        {
            switch( value )
            {
                case "Disabled":
                    return WorkloadState.Disabled;
                case "Enabled":
                    return WorkloadState.Enabled;
                case "Unsupported":
                    return WorkloadState.Unsupported;
            }
            return null;
        }
    }
}
