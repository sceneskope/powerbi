// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SceneSkope.PowerBI.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for DatasourceUserAccessRight.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum DatasourceUserAccessRight
    {
        /// <summary>
        /// Removes permission to access the datasource. Only applies when
        /// updating user permissions.
        /// </summary>
        [EnumMember(Value = "None")]
        None,
        /// <summary>
        /// Indicates that datasets owned by the user has read access to this
        /// datasource.
        /// </summary>
        [EnumMember(Value = "Read")]
        Read,
        /// <summary>
        /// Indicates that user can override effective identity for Power BI
        /// Embedded.
        /// </summary>
        [EnumMember(Value = "ReadOverrideEffectiveIdentity")]
        ReadOverrideEffectiveIdentity
    }
    internal static class DatasourceUserAccessRightEnumExtension
    {
        internal static string ToSerializedValue(this DatasourceUserAccessRight? value)
        {
            return value == null ? null : ((DatasourceUserAccessRight)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this DatasourceUserAccessRight value)
        {
            switch( value )
            {
                case DatasourceUserAccessRight.None:
                    return "None";
                case DatasourceUserAccessRight.Read:
                    return "Read";
                case DatasourceUserAccessRight.ReadOverrideEffectiveIdentity:
                    return "ReadOverrideEffectiveIdentity";
            }
            return null;
        }

        internal static DatasourceUserAccessRight? ParseDatasourceUserAccessRight(this string value)
        {
            switch( value )
            {
                case "None":
                    return DatasourceUserAccessRight.None;
                case "Read":
                    return DatasourceUserAccessRight.Read;
                case "ReadOverrideEffectiveIdentity":
                    return DatasourceUserAccessRight.ReadOverrideEffectiveIdentity;
            }
            return null;
        }
    }
}
