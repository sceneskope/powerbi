// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SceneSkope.PowerBI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A dataset table
    /// </summary>
    public partial class Table
    {
        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        public Table()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        /// <param name="name">The table name</param>
        /// <param name="columns">The column schema for this table</param>
        /// <param name="rows">The data rows within this table</param>
        /// <param name="measures">The measures within this table</param>
        public Table(string name, IList<Column> columns, IList<Row> rows = default(IList<Row>), IList<Measure> measures = default(IList<Measure>))
        {
            Name = name;
            Columns = columns;
            Rows = rows;
            Measures = measures;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the table name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the column schema for this table
        /// </summary>
        [JsonProperty(PropertyName = "columns")]
        public IList<Column> Columns { get; set; }

        /// <summary>
        /// Gets or sets the data rows within this table
        /// </summary>
        [JsonProperty(PropertyName = "rows")]
        public IList<Row> Rows { get; set; }

        /// <summary>
        /// Gets or sets the measures within this table
        /// </summary>
        [JsonProperty(PropertyName = "measures")]
        public IList<Measure> Measures { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Columns == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Columns");
            }
            if (Name != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Name, "^[\\x09\\x0A\\x0D\\x20\\x23\\x2D\\x30-\\x39\\x40-\\x5A\\x5E-\\x5F\\x61-\\x7A\\x7E-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]{1,100}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Name", "^[\\x09\\x0A\\x0D\\x20\\x23\\x2D\\x30-\\x39\\x40-\\x5A\\x5E-\\x5F\\x61-\\x7A\\x7E-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]{1,100}$");
                }
            }
            if (Columns != null)
            {
                foreach (var element in Columns)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Measures != null)
            {
                foreach (var element1 in Measures)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
