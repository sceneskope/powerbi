// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SceneSkope.PowerBI.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ImportConflictHandlerMode.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ImportConflictHandlerMode
    {
        /// <summary>
        /// If dataset with the same name already exists, Import operation will
        /// create a new dataset with the same name.
        /// </summary>
        [EnumMember(Value = "Ignore")]
        Ignore,
        /// <summary>
        /// If dataset with the same name already exists, Import operation will
        /// be aborted.
        /// </summary>
        [EnumMember(Value = "Abort")]
        Abort,
        /// <summary>
        /// If dataset with the same name already exists, Import operation will
        /// replace the existing dataset with the new one.<br/>Import operation
        /// will fail if there is no conflict or if there are more than one
        /// datasets with the same name.
        /// </summary>
        [EnumMember(Value = "Overwrite")]
        Overwrite,
        /// <summary>
        /// If dataset with the same name already exists, Import operation will
        /// replace the existing dataset with the new one.<br/>Import operation
        /// will fail if there are more than one datasets with the same name.
        /// </summary>
        [EnumMember(Value = "CreateOrOverwrite")]
        CreateOrOverwrite
    }
    internal static class ImportConflictHandlerModeEnumExtension
    {
        internal static string ToSerializedValue(this ImportConflictHandlerMode? value)
        {
            return value == null ? null : ((ImportConflictHandlerMode)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ImportConflictHandlerMode value)
        {
            switch( value )
            {
                case ImportConflictHandlerMode.Ignore:
                    return "Ignore";
                case ImportConflictHandlerMode.Abort:
                    return "Abort";
                case ImportConflictHandlerMode.Overwrite:
                    return "Overwrite";
                case ImportConflictHandlerMode.CreateOrOverwrite:
                    return "CreateOrOverwrite";
            }
            return null;
        }

        internal static ImportConflictHandlerMode? ParseImportConflictHandlerMode(this string value)
        {
            switch( value )
            {
                case "Ignore":
                    return ImportConflictHandlerMode.Ignore;
                case "Abort":
                    return ImportConflictHandlerMode.Abort;
                case "Overwrite":
                    return ImportConflictHandlerMode.Overwrite;
                case "CreateOrOverwrite":
                    return ImportConflictHandlerMode.CreateOrOverwrite;
            }
            return null;
        }
    }
}
